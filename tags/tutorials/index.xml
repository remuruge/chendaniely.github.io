<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorials on Daniel Chen</title>
    <link>https://daniel.rbind.io/tags/tutorials/</link>
    <description>Recent content in tutorials on Daniel Chen</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Daniel Chen {year}</copyright>
    <lastBuildDate>Tue, 05 May 2015 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://daniel.rbind.io/tags/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started with Data Science and Analysis</title>
      <link>https://daniel.rbind.io/2015/05/05/getting-started-with-data-science-and-analysis/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://daniel.rbind.io/2015/05/05/getting-started-with-data-science-and-analysis/</guid>
      <description>&lt;p&gt;I&#39;ve been an instructor for 
&lt;a href=&#34;http://software-carpentry.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Software-Carpentry (SWC)&lt;/a&gt;
 over a year now.
It&#39;s been a facinating experience and I&#39;m proud to be a part of an open source movement promoting best practices.
Typically when looking to start learing data science/analysis the first things people look up is something along the lines of: &amp;ldquo;learn python&amp;rdquo;, &amp;ldquo;free online r course&amp;rdquo;, &amp;ldquo;data science python&amp;rdquo;, &amp;ldquo;r jobs&amp;rdquo;, etc.
Or scan through the coursera offerings.
I&#39;m a bit biased, but I think the SWC material is one of the best ways to just get familiar with the basics.
This isn&#39;t a blog post about SWC per se, but how one might go about learing and navigating some of the material on your own without attending a workshop.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;software-carptentry-material&#34;&gt;Software Carptentry Material&lt;/h1&gt;
&lt;p&gt;SWC has a page of 
&lt;a href=&#34;http://software-carpentry.org/lessons.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lessons&lt;/a&gt;
 that link to the various lessons taught during workshops.
The core material covers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;http://swcarpentry.github.io/shell-novice/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unix&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Some programming language like 
&lt;a href=&#34;http://swcarpentry.github.io/python-novice-inflammation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt;
, 
&lt;a href=&#34;http://swcarpentry.github.io/r-novice-inflammation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R&lt;/a&gt;
, 
&lt;a href=&#34;http://swcarpentry.github.io/matlab-novice-inflammation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MATLAB&lt;/a&gt;
, etc&lt;/li&gt;
&lt;li&gt;Version control using 
&lt;a href=&#34;https://github.com/swcarpentry/git-novice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git&lt;/a&gt;
 or 
&lt;a href=&#34;https://github.com/swcarpentry/hg-novice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mercurial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Databases and 
&lt;a href=&#34;http://swcarpentry.github.io/sql-novice-survey/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQL&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you take a look and listen (there is sound) to the 
&lt;a href=&#34;http://swcarpentry.github.io/slideshows/introducing-software-carpentry/index.html#slide-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introductory browsercase&lt;/a&gt;
.
You will see that we say we teach the above material, but in essense we try to convey:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Automation of repetitive tasks&lt;/li&gt;
&lt;li&gt;Tracking and sharing work&lt;/li&gt;
&lt;li&gt;Building modular code&lt;/li&gt;
&lt;li&gt;Manage data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&#39;s a little bait-and-switch :)&lt;/p&gt;
&lt;h1 id=&#34;installing-things&#34;&gt;Installing Things&lt;/h1&gt;
&lt;p&gt;For each SWC workshop is accompanied by a 
&lt;a href=&#34;http://chendaniely.github.io/workshop-template-empty/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;website&lt;/a&gt;
.
The website Contains information about location, instructors, helpers, syllabus, etc.
For people reading this post, the most important part may be the installation instructions towards the middle/bottom of the page.
There are separate instructions depending on your operating system.&lt;/p&gt;
&lt;p&gt;Essentially:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python: 
&lt;a href=&#34;http://continuum.io/downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anaconda&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;R: 
&lt;a href=&#34;http://cran.rstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R&lt;/a&gt;
 and 
&lt;a href=&#34;http://www.rstudio.com/products/rstudio/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;navigating-the-material&#34;&gt;Navigating the Material&lt;/h1&gt;
&lt;p&gt;For people who have not been to a workshop trying to navigate the lesson material can be tricky.
And I would highly suggest going through at least the first 3 
&lt;a href=&#34;http://swcarpentry.github.io/shell-novice/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unix&lt;/a&gt;
 lessons.
This is mainly because loading files in a programming language uses the concept of relative and absolute paths, and it&#39;s important to know where your data is and how to load it.&lt;/p&gt;
&lt;p&gt;Using the R material as an example.  The instructors typically teach from the 
&lt;a href=&#34;http://swcarpentry.github.io/r-novice-inflammation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Novice R Inflammation&lt;/a&gt;
 lessons.  There has been some 
&lt;a href=&#34;https://github.com/swcarpentry/r-novice-inflammation/pull/65#issuecomment-93483536&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;discussion&lt;/a&gt;
 and plans to use the 
&lt;a href=&#34;http://www.gapminder.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gapminder&lt;/a&gt;
 data to teach lessons.  The beta can be found in the 
&lt;a href=&#34;https://github.com/swcarpentry/r-novice-gapminder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Novice Gapminder&lt;/a&gt;
 lesson.&lt;/p&gt;
&lt;p&gt;Once you&#39;re on the github page of the lesson, there are a few ways to get the lessons plan&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you know your way around git, you can clone the repository&lt;/li&gt;
&lt;li&gt;Otherwise, you will see an option to &amp;ldquo;Download ZIP&amp;rdquo; on the right panel.&lt;/li&gt;
&lt;li&gt;View them in the browser&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first 2 methods get you do the same place &amp;ndash; have the lessons on your computer.
In order to view the lessons, open up the folder and all the lessons are numbered and end in &lt;code&gt;.html&lt;/code&gt;.
Click, read, and code through them in order.&lt;/p&gt;
&lt;p&gt;If you want to view the lessons online, you can click the &lt;code&gt;.Rmd&lt;/code&gt; documents, and github should be able to render the lesson for you in the browser.  For Python and other materials, use the &lt;code&gt;.md&lt;/code&gt; documents.
The caveat with viewing the &lt;code&gt;.Rmd&lt;/code&gt; and &lt;code&gt;.md&lt;/code&gt; (aka R markdown, and markdown respectively) is that it does not render the documently exactly the same way as the &lt;code&gt;.html&lt;/code&gt; files.
There is a potential for things to be rendered incorrectly, and you&#39;ll see some bizzare (YAML) header on the top.
It&#39;s great for a quick reference when you&#39;re not at your computer, but I would suggest using one of the &lt;code&gt;.html&lt;/code&gt; methods.&lt;/p&gt;
&lt;h1 id=&#34;data-carpentry-material&#34;&gt;Data Carpentry Material&lt;/h1&gt;
&lt;p&gt;Software Carpentry&#39;s sister organization, 
&lt;a href=&#34;http://datacarpentry.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data Carpentry&lt;/a&gt;
 also has a set of 
&lt;a href=&#34;http://datacarpentry.org/lesson-dev.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lesson plans&lt;/a&gt;
.
From their 
&lt;a href=&#34;http://datacarpentry.org/about.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;about us&lt;/a&gt;
 page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Data Carpentry is a sister organization of Software Carpentry designed to teach basic concepts, skills and tools for working more effectively with data.
We develop curricula and run workshops that are 1) domain specific; 2) target fundamental data analysis and data management challenges; and 3) require little or no prior programming experience.
In many domains of research the rapid generation of large amounts of data is fundamentally changing how research is done. The deluge of data presents great opportunities, but also many challenges in managing, analyzing and sharing data. Data Carpentry aims to teach the data skills that will enable researchers to be more effective and productive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pick a language you want to do the lesson with.  &lt;code&gt;clone&lt;/code&gt; or &lt;code&gt;Download ZIP&lt;/code&gt;, and go through the lessons using the &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.Rmd&lt;/code&gt;, or &lt;code&gt;.md&lt;/code&gt; as mentioned above.&lt;/p&gt;
&lt;h1 id=&#34;happy-learning&#34;&gt;Happy Learning!&lt;/h1&gt;
&lt;p&gt;Hopefully this has been clear enough.  If not, post a comment, and I&#39;ll respond and update this post accordinly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Open Source A Python Project I</title>
      <link>https://daniel.rbind.io/2015/02/05/open-source-a-python-project-i/</link>
      <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://daniel.rbind.io/2015/02/05/open-source-a-python-project-i/</guid>
      <description>&lt;p&gt;I started my

&lt;a href=&#34;https://github.com/chendaniely/multi-agent-neural-network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;first&lt;/a&gt;

open source project towards the end of summer 2014 I began working at
the 
&lt;a href=&#34;http://vbi.vt.edu/sdal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Social Decision Analytics Laboratory&lt;/a&gt;
 at
the 
&lt;a href=&#34;http://www.vbi.vt.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Virginia Informatics Institutee&lt;/a&gt;
.  The
project involves creating a simulation environment where we can
observe how an idea or belief spreads within a social network.  The
initial thought was to look for and extend an

&lt;a href=&#34;http://en.wikipedia.org/wiki/Agent-based_model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;agent-based model&lt;/a&gt;

package in Python.  I did manage to find the

&lt;a href=&#34;https://github.com/azvoleff/pyabm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pyabm&lt;/a&gt;
 package by

&lt;a href=&#34;http://azvoleff.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alex Zvoleff&lt;/a&gt;
, but for simplicity&#39;s sake I
wrote my own package instead of extending his existing code base.&lt;/p&gt;
&lt;p&gt;I took it as an opportunity to learn and &amp;lsquo;do things right&amp;rsquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write a module that contains all program logic&lt;/li&gt;
&lt;li&gt;Write functions that only do only one thing, but does it well&lt;/li&gt;
&lt;li&gt;Unit test everything&lt;/li&gt;
&lt;li&gt;Test builds on different versions of Python&lt;/li&gt;
&lt;li&gt;Document your code&lt;/li&gt;
&lt;li&gt;Get it on 
&lt;a href=&#34;https://pypi.python.org/pypi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PyPI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP8&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This series of posts are essentially notes to myself, and to other
programmers who are starting out from where I was.  In this post I
discuss the background, rational, and inital steps in my open source
struggles.  In

&lt;a href=&#34;https://github.com/chendaniely/chendaniely.github.io/blob/draft-os-python2/_posts/2015-02-05-open-sourcing-a-python-project-II.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;part II&lt;/a&gt;

I discuss automatic project and code documentation.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;I had already been involved with

&lt;a href=&#34;http://software-carpentry.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Software Carpentry (SWC)&lt;/a&gt;
 for about 8
months when I started the project, so many of the concepts I just
listed were not entirely foreign, just a matter of implementation.
Thanks to a workshop by

&lt;a href=&#34;http://www.ccpp.nyu.edu/gabriel_perez-giz.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gabriel Perez-Giz&lt;/a&gt;
 at
NYU earlier that summer, I took it upon myself to practice my EMACS
and setup 
&lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;elpy&lt;/a&gt;
 as my IDE.  A
development environment that can be used within a terminal was
especially important, because the simulations I would be running would
all be on a remote server.&lt;/p&gt;
&lt;p&gt;For git, it was getting into the habit of not committing directly to
master.  For Python, I&#39;d write a suite of unit tests for the first
time, and I figured if I write some comments and docstrings I can get
a nice document from it (I was wrong about that).  Finally, I wanted
to get those cool little badges people have on their github repo about
build status, coverage, etc.  That&#39;s when I found an awesome blog post
by 
&lt;a href=&#34;http://www.jeffknupp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jeff Knupp&lt;/a&gt;
 titled
&amp;lsquo;
&lt;a href=&#34;http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Sourcing a Python Project the Right Way&lt;/a&gt;
&#39;.&lt;/p&gt;
&lt;p&gt;It&#39;s an amazing read if you are ready to take your programming
practices to the next step.  Jeff references a

&lt;a href=&#34;https://github.com/audreyr/cookiecutter-pypackage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cookie-cutter&lt;/a&gt;

that will setup the python project boilerplate, but I opted to just
follow the blog post and do everything manually so I can have a better
understanding as to what is going on in the background.  Plus, this
lets me slowly add features, rather than have an entire repo loaded
with unknown files.  More important, I added a few other things to
make my project &amp;lsquo;better&amp;rsquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the

&lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git&lt;/a&gt;
-
&lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flow&lt;/a&gt;

paradigm to add new features&lt;/li&gt;
&lt;li&gt;Continuous integration (with

&lt;a href=&#34;https://travis-ci.org/recent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TravisCI&lt;/a&gt;
)&lt;/li&gt;
&lt;li&gt;Test your package with other versions of Python (using

&lt;a href=&#34;https://tox.readthedocs.org/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tox&lt;/a&gt;
)&lt;/li&gt;
&lt;li&gt;Code documentation with 
&lt;a href=&#34;http://sphinx-doc.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sphinx&lt;/a&gt;
 and

&lt;a href=&#34;https://readthedocs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Read the Docs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I opted not to use Tox locally (at least not yet).  TravisCI is
handling my Python compatibility since I was working with Python 3.4,
and was not going to have Python 2 support.  I added a build for
Python 3.4 and 3.3, and called it a day.  Also I opted to use

&lt;a href=&#34;https://nose.readthedocs.org/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nosetests&lt;/a&gt;
 instead of

&lt;a href=&#34;http://pytest.org/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pytest&lt;/a&gt;
 since that&#39;s what I was shown when
I helped out at the

&lt;a href=&#34;http://geocarpentry.github.io/2014-01-30-mit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT SWC workshop&lt;/a&gt;
.
That, plus there was SWC

&lt;a href=&#34;http://software-carpentry.org/v4/test/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;material&lt;/a&gt;
, and
other 
&lt;a href=&#34;https://github.com/numpy/numpy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;big&lt;/a&gt;
 open source projects use
it, was my rational to stick with &lt;code&gt;nosetests&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;my-project&#34;&gt;My project&lt;/h1&gt;
&lt;p&gt;The original

&lt;a href=&#34;https://github.com/chendaniely/multi-agent-neural-network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Multi-Agent Neural Network (MANN)&lt;/a&gt;

project had a &lt;code&gt;main.py&lt;/code&gt; script that loaded in my modules for the
individual agents and the network structure.  Everything was placed
under the &lt;code&gt;mann&lt;/code&gt; folder in the repo, with no subfolders.  When I
eventually realized that I wanted the project to be PyPI ready, I
wanted to separate the main program logic (the MANN code) from the
actual script that sets up the simulation.  I eventually moved the
&lt;code&gt;main.py&lt;/code&gt; script (and all required files) into the

&lt;a href=&#34;https://github.com/chendaniely/multidisciplinary-diffusion-model-experiments&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Multidisciplinary Diffusion Model Experiments (MDME)&lt;/a&gt;

repo.&lt;/p&gt;
&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;I&#39;ve realized the more I program in python, the more invaluable
virtual environments are when developing packages.  A Virtual
Environment is a tool to keep dependencies required by different
projects in separate places while simultaneously keeping your base
python distribution clean and working should something go awry.  They
also allow you to flip between Python 2 and Python 3 depending on what
version a piece of code you are trying to run was written in.  Pretty
cool stuff.&lt;/p&gt;
&lt;p&gt;The Python distribution I use is called

&lt;a href=&#34;http://continuum.io/downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anaconda&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Setting up virtual environments using &lt;code&gt;conda&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda create -n VIRTUAL_ENV_NAME python=3.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can specify different versions of python and/or pre-create
environments with a set of modules if needed.&lt;/p&gt;
&lt;p&gt;Switching between environments: &lt;code&gt;source activate VIRTUAL_ENV_NAME&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To exit out of an environment: &lt;code&gt;source deactivate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can read up more about creating environments on the conda
documentation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;http://conda.pydata.org/docs/intro.html#creating-python-3-4-or-python-2-6-environments&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Createing Python 2/3 environments&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://conda.pydata.org/docs/examples/create.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;conda create&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://www.continuum.io/blog/conda&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Packages and Environments with conda&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;issues&#34;&gt;Issues&lt;/h1&gt;
&lt;p&gt;Turning a current python project into a &amp;lsquo;module&amp;rsquo; can break a few
things.  It is as simple as putting a &lt;code&gt;__init__.py&lt;/code&gt; into a directory
to signify that the contents of the folder is now a Python module, but
there can be some weird side-effects.&lt;/p&gt;
&lt;h1 id=&#34;unit-tests&#34;&gt;Unit tests&lt;/h1&gt;
&lt;p&gt;When you turn your project into a package, you will find that if you
run nosetests it will start running the unit tests for all the modules
you load (if they have any).&lt;/p&gt;
&lt;p&gt;For example I was initially using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nosetests --cover-branches --with-coverage&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to test my code, but I had to add the &lt;code&gt;--cover-package=MODULE_NAME&lt;/code&gt; to
get it to only test the code in my module:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nosetests --cover-branches --with-coverage --cover-erase --cover-package=mann&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;importing-modules&#34;&gt;Importing Modules&lt;/h1&gt;
&lt;p&gt;Since I&#39;ve moved out my simulation code from the code that defines
that MANN module, I had to install the MANN module.  One way to do it
is to upload the code to PyPI and &lt;code&gt;pip install&lt;/code&gt; the package.  The
problem is when you want to load a module to PyPI you essentially need
to have a git tag associated with the version you want.  This is
problematic when you are rapidly prototyping since you&#39;ll need to
either delete tags, or constantly increment the tag.  You&#39;ll end up
with a v.0.314.0 very quickly.  You can do a local install of your
module by going to where you have the setup.py file and doing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python setup.py install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is why virtual environments are really helpful.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You won&#39;t have to worry about cluttering the base Python
distribution and modules with your &amp;lsquo;test&amp;rsquo; code.&lt;/li&gt;
&lt;li&gt;You can test your code before uploading it to PyPI (or anywhere
else).  This is really helpful becuase PyPI requires you to have a
&lt;code&gt;tag&lt;/code&gt;.  Doing a local install allows you to workout any potential
bugs before submitting a release so you won&#39;t have to have 15
release numbers for your first release.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Installing Eclipse in Ubuntu 13.10</title>
      <link>https://daniel.rbind.io/2014/02/04/installing-eclipse-in-ubuntu-13.10/</link>
      <pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://daniel.rbind.io/2014/02/04/installing-eclipse-in-ubuntu-13.10/</guid>
      <description>&lt;p&gt;Adapted answer from Shubhmay and TimD on 
&lt;a href=&#34;http://askubuntu.com/questions/26632/how-to-install-eclipse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;askubuntu&lt;/a&gt;
 on installing Eclipse.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Extract the eclipse.XX.YY.tar.gz file: &lt;code&gt;tar -zxvf eclipse.XX.YY.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the extracted folder to &lt;code&gt;/opt&lt;/code&gt;: &lt;code&gt;sudo cp -r eclipse /opt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a desktop file &lt;code&gt;gedit eclipse.desktop&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;copy the following to the eclipse.desktop file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; [Desktop Entry]
 Name=Eclipse 
 Type=Application
 #Exec=eclipse
 Exec=env UBUNTU_MENUPROXY=0 eclipse # for menubar bug in 13.10
 Terminal=false
 Icon=eclipse
 Comment=Integrated Development Environment
 NoDisplay=false
 Categories=Development;IDE;
 Name[en]=Eclipse
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the following command to automatically install it in the unity: &lt;code&gt;sudo desktop-file-install eclipse.desktop&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a symlink in &lt;code&gt;/usr/local/bin&lt;/code&gt; using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/local/bin
ln -s /opt/eclipse/eclipse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;according to user ortang:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use the eclipse version when creating a the symlink
(eg: &lt;code&gt;ln -s /opt/eclipse/eclipse /usr/local/bin/eclipse42&lt;/code&gt;),
and use &lt;code&gt;Exec=eclipse42&lt;/code&gt; at the desktop entry.
That way you will be able to install multiple different versions of eclipse&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For eclipse icon to be displayed in dash, eclipse icon can be added with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp /opt/eclipse/icon.xpm /usr/share/pixmaps/eclipse.xpm&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up Repast Simphony 2.1 in Linux</title>
      <link>https://daniel.rbind.io/2014/02/04/setting-up-repast-simphony-2.1-in-linux/</link>
      <pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://daniel.rbind.io/2014/02/04/setting-up-repast-simphony-2.1-in-linux/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;http://repast.sourceforge.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Repast Simphony&lt;/a&gt;
 is a Java based collection of agent-based modeling and simulation software.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Repast Simphony 2.1 installs its library files into &lt;code&gt;~/.eclipse/ECLIPSEVERSION/plugins/&lt;/code&gt; and &lt;code&gt;features/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when you create the model it looks for these files in &lt;code&gt;/opt/eclipse/plugins/&lt;/code&gt; and &lt;code&gt;/features&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This issue has been brought up and added to the issue tracker as of 2013-09-30&lt;/p&gt;
&lt;p&gt;User mijael posted a solution to the Repast Interest Mailing list about creating symlinks to the /opt directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd .eclipse/org.eclipse.platform_4.3.0_1473617060_linux_gtk_x86_64/plugins/
ls | xargs -I targ sudo ln -s ~/.eclipse/org.eclipse.platform_4.3.0_1473617060_linux_gtk_x86_64/plugins/targ /opt/eclipse/plugins/targ
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;repeat the same for the features directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd .eclipse/org.eclipse.platform_4.3.0_1473617060_linux_gtk_x86_64/features/
ls | xargs -I targ sudo ln -s ~/.eclipse/org.eclipse.platform_4.3.0_1473617060_linux_gtk_x86_64/features/targ /opt/eclipse/features/targ
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Setting up a WebDAV Client for Courseworks</title>
      <link>https://daniel.rbind.io/2013/09/04/setting-up-a-webdav-client-for-courseworks/</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://daniel.rbind.io/2013/09/04/setting-up-a-webdav-client-for-courseworks/</guid>
      <description>&lt;p&gt;Columbia University&#39;s Courseworks website allows you to download files for a registered class.  A problem arises when multiple files needed to be downloaded simultaneously.  One simply cannot just select the files and bulk download them.  Courseworks have instructions to circumvent this limitation in the web interface by implementing a 
&lt;a href=&#34;http://en.wikipedia.org/wiki/WebDAV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebDAV&lt;/a&gt;
 client.  However, other than Cyberduck under their Mac instructions, the Windows suggestion is quite limited.&lt;/p&gt;
&lt;p&gt;In this post I discuss setting up a WebDAV Client for Windows and Mac.  If you are on Linux, I&#39;ve only used 
&lt;a href=&#34;http://www.jscape.com/products/file-transfer-clients/anyclient/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AnyClient&lt;/a&gt;
, which is Java based but is not as comprehensive as the Windows/Mac alternatives suggested in this post (and this is the one suggested by Courseworks).  If anyone knows of a good Linux WebDAV client, let me know!&lt;/p&gt;
&lt;p&gt;This post shows how to setup 
&lt;a href=&#34;http://www.bitkinex.com/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BitKinex &lt;/a&gt;
and 
&lt;a href=&#34;http://cyberduck.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cyberduck &lt;/a&gt;
in Windows.  You can also use the Cyberduck instructions for Mac.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Courseworks also has instructions on setting up Cyberduck under their Mac section; the same instructions can also be used for the Windows version of Cyberduck.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Be careful when accessing a directory that you do not own.  There is the potential that you may be able to upload files to the directory, or worse, change, overwrite, or delete the files.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:  Accessing your Courseworks files and resources links.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What you have to do first is log into your Coureworks, click on the course number for your class and then in the left frame of the page click &amp;ldquo;Files &amp;amp; Resources&amp;rdquo;.  On the top of the page you will see a link for &amp;ldquo;upload-download multiple resources&amp;rdquo;, see figure 1.1&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It will direct you do a link to copy in &amp;ldquo;step 1&amp;rdquo; and directions to set up WebDAV in &amp;ldquo;step 2&amp;rdquo;.  In &amp;ldquo;step 2&amp;rdquo; you will find the instructions for setting up Cyberduck for Mac, which is the same for windows (like I mentioned above).&lt;/p&gt;
&lt;p&gt;The link that you need essentially has 2 parts, the part that is highlighted in Figure 1.2 is what you will need when you are using BitKinex, the entire link is needed for Cyberduck,&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Step 2a Windows:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For Windows I use Bitkinex.  You can also use Cyberduck (which I describe in the Mac section below).&lt;/p&gt;
&lt;p&gt;You can download BitKinex 
&lt;a href=&#34;http://www.bitkinex.com/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;
.  At the time of this post Current Version: **3.2.3 **Release Date: &lt;strong&gt;07/11/2010&lt;/strong&gt;. Do not worry about the &amp;lsquo;older&amp;rsquo; release date.&lt;/p&gt;
&lt;p&gt;After you have BitKinex installed, you will right click &amp;ldquo;Http/WebDAV&amp;rdquo; and go to New &amp;gt; Http/WebDav, See figure 2.1 (sorry my mouse is highlighted over the wrong option).&lt;/p&gt;
&lt;p&gt;[&lt;!-- raw HTML omitted --&gt;][5]&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;A popup window will appear for a name, you can simply put &amp;ldquo;Columbia&amp;rdquo; or &amp;ldquo;newcourseworks.columbia.edu&amp;rdquo; or &amp;ldquo;courseworks.columbia.edu&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Next, it should direct you to a settings menu under the &amp;ldquo;Server&amp;rdquo; option on the left, See Figure 2.2.  for server address enter &amp;ldquo;courseworks.columbia.edu&amp;rdquo;, I used &amp;ldquo;newcourseworks.columbia.edu&amp;rdquo;, but I believe the two should be the same, and the former may be preferred.  You can also refer to Step 1 and copy the text I showed that was not highlighted in blue (Figure 1.2).  Under Authentication, enter your UNI for &amp;ldquo;User&amp;rdquo; and password for &amp;ldquo;Password&amp;rdquo;&lt;/p&gt;
&lt;p&gt;[&lt;!-- raw HTML omitted --&gt;][6]&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Step 2b Mac:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cyberduck can be found 
&lt;a href=&#34;http://cyberduck.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;
.  I am using the Windows version of Cyberduck, the Mac should look almost the same.&lt;/p&gt;
&lt;p&gt;Courseworks have the following instructions on their site:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click the &lt;strong&gt;Open Connection&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Server&lt;/em&gt; dialog box, type (or copy and paste) the path as shown above.&lt;/li&gt;
&lt;li&gt;Type in your Sakai username and password and click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will now see a window on your Mac screen that represents the resources that are in your site. Simply drag and drop between this window and other Finder windows on your Mac to transfer files to and from your Sakai site&#39;s resources folder.&lt;/p&gt;
&lt;p&gt;I will be showing a different method, all have the same results.&lt;/p&gt;
&lt;p&gt;On the bottom left of the application, click on the &amp;ldquo;+&amp;rdquo; sign (Figure 3.1)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;[5]: {{ site.baseurl }}/wp-content/uploads/2013/09/webdav03.png
[6]: {{ site.baseurl }}/wp-content/uploads/2013/09/webdav04.png&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up VirtualBox</title>
      <link>https://daniel.rbind.io/2013/02/21/setting-up-virtualbox/</link>
      <pubDate>Thu, 21 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://daniel.rbind.io/2013/02/21/setting-up-virtualbox/</guid>
      <description>&lt;p&gt;Edit: March 31, 2014: As an assignment for &lt;!-- raw HTML omitted --&gt;Software Carpentry&lt;!-- raw HTML omitted --&gt; I made a screencast to follow along with these steps, &lt;!-- raw HTML omitted --&gt;here&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Installing Windows XP in VirtualBox:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Files needed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;VirtualBox (VB) Intaller 
&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here:&lt;/a&gt;
&lt;br&gt;

&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CD or ISO of OS (for my CUMC/CU friends you can find the windows XP ISO 
&lt;a href=&#34;http://cuit.columbia.edu/cuit/software-downloads/operating-system-software/windows-xp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here:&lt;/a&gt;
&lt;br&gt;

&lt;a href=&#34;http://cuit.columbia.edu/cuit/software-downloads/operating-system-software/windows-xp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; http://cuit.columbia.edu/cuit/software-downloads/operating-system-software/windows-xp&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The VB version I am using is 4.2.6&lt;/p&gt;
&lt;p&gt;After Installing VB. You want to click &amp;ldquo;New&amp;rdquo; in the toolbar. You will be given a setup dialogue.&lt;/p&gt;
&lt;p&gt;Name and operating System:&lt;br&gt;
Give your virtual machine (VM) a name (i.e. Windows XP). Make sure Type is &amp;ldquo;Microsoft Windows&amp;rdquo; and Version is &amp;ldquo;Windows XP&amp;rdquo; (Note: you can install other operating systems and/or different version of windows, just set those dropdown menu&#39;s accordingly).&lt;/p&gt;
&lt;p&gt;Memory size:&lt;br&gt;
By default, VB set my WinXP VM to have 192 MB. Depending on how much RAM (memory) your computer has and programs you want to run you can increase it. For the most part you can leave it as is.&lt;/p&gt;
&lt;p&gt;Hard drive:&lt;br&gt;
Your VM is essentially a computer, and computers need hard drives!&lt;br&gt;
click the radio button for &amp;ldquo;create a virtual hard drive now&amp;rdquo;&lt;br&gt;
another setup window will popup. Just leave the Hard drive file type as VDI (VirtualBox Disk Image). Leave the storage on physical hard drive as &amp;ldquo;dynamically allocated&amp;rdquo;. This will allow the VM to take up only enough space as needed and allow it to grow/shrink as needed. The file location and size should default the same as your VM name and 10.00GB. You can leave this at its defaults unless you know you will be saving and emulating a lot of programs in your VM. We will be setting up shared folders later so you can access your regular files on your computer without having copies in your VM. You just need enough space to install your OS and whatever programs you will be running. 10GB should be more than enough.&lt;/p&gt;
&lt;p&gt;Your new VM will show up on the left panel in VB. Select it and click the Start button in the toolbar. Your VM will load and a dialogue box will appear telling you that when your VM is active it will capture your mouse so it can be used within the VM. Dismiss the message with &amp;ldquo;OK&amp;rdquo;.&lt;br&gt;
Set up Start up Disk. On my computer it defaulted to G:, just hit OK and let your VM load. You will eventually run into a message saying &amp;ldquo;FATAL: No bootable medium found! System halted.&amp;rdquo; In your VM go to Devices &amp;gt; CD/DVD Devices &amp;gt; &amp;ldquo;Choose a virtual CD/DVD disk file&amp;rdquo;.&lt;br&gt;
[&lt;!-- raw HTML omitted --&gt;][3]&lt;br&gt;
Navigate to and select your OS ISO file you downloaded earlier. Then go to Machine &amp;gt; Reset. Your VM will restart and if you are installing Windows XP, The screen will Turn Blue and will begin the Windows XP installation process.&lt;/p&gt;
&lt;p&gt;You will eventually end up on this screen:&lt;br&gt;
[&lt;!-- raw HTML omitted --&gt;][4]&lt;/p&gt;
&lt;p&gt;On the bottom you will see the keyboard commands to navigate through the menus. Press &amp;ldquo;ENTER&amp;rdquo; to install. Then select the first option &amp;ldquo;Format the partition using the NTFS file system &lt;!-- raw HTML omitted --&gt;&amp;rdquo; and hit ENTER. Windows will begin installing your VM. Sit tight. get some coffee. The system will restart on its own when it is ready to setup your OS. Eventually you will end up here:&lt;br&gt;
[&lt;!-- raw HTML omitted --&gt;][5]&lt;br&gt;
Click Next, and accept the agreement, and just keep clicking next (unless you know what you are doing). Give your name, you can give your VM a name, leave your administrator password blank, set up your time, and NEXT your way through the install. More coffee!&lt;/p&gt;
&lt;p&gt;Eventually, you will go into the initial Windows user setup pages. You don&#39;t need automatic updating, skip the internet setup, and enter your username. Click Finish and windows will load up.&lt;/p&gt;
&lt;p&gt;First think you may have noticed is that when you resize the VM window, it does not scale nicely. To fix this and also setup folder and USB access, and other things to make your VM integrate seamlessly, you have to install Guest Additions.&lt;/p&gt;
&lt;p&gt;If you go to Devices &amp;gt; CD/DVD Devices (as you did earlier) your OS .ISO should be selected. Then go to Devices &amp;gt; &amp;ldquo;Install Guest Additions. Click next and install the files. When a dialogue box pops up saying that the software has not passed Windows Logo testing, just click &amp;ldquo;Continue Anyway&amp;rdquo;. Click FINISH and reboot your VM afterwards.&lt;/p&gt;
&lt;p&gt;When your VM reloads, go to View &amp;gt; Auto-resize Guest Display is checked. Your VM will now auto-resize.&lt;/p&gt;
&lt;p&gt;Setting up Shared folders. This will allow you to access your main OS files and folders within your VM without having to use programs such as dropbox to sync files in your VM. This also saves you a lot of space since you do not need to have duplicated files taking up HDD space. To do this, go to Devices &amp;gt; Shared Folders&amp;hellip;&lt;/p&gt;
&lt;p&gt;[&lt;!-- raw HTML omitted --&gt;][6]&lt;/p&gt;
&lt;p&gt;Click on the folder with a + icon. Select &amp;ldquo;Other&amp;hellip;&amp;rdquo; in the Folder Path dropdown and navigate to a folder you want access to in your VM. I suggest you at least pick your main HDD folder (C:\ in windows). When you are done Click OK and make sure &amp;ldquo;Auto-mount&amp;rdquo; and &amp;ldquo;Make Permanent&amp;rdquo; check boxes are checked in your Add Share Window. This will automatically mount these folders every time you run your VM. Add as many folders as you need, especially folders that you commonly access.&lt;/p&gt;
&lt;p&gt;Finally under Devices menu bar, make sure &amp;ldquo;Shared Clipboard&amp;rdquo; and &amp;ldquo;Drag&#39;n&#39;Drop&amp;rdquo; have &amp;ldquo;Bi-directional&amp;rdquo; checked. Finally Restart the VM to apply your settings. Your shared folders will appear as network drives after you restart when you open up &amp;ldquo;My Computer&amp;rdquo;. You will also be able to move files around between VM easily, and things you copy will paste in your main OS. This is useful if you are running SAS in your VM and want to paste the output into your word document in your main OS.&lt;/p&gt;
&lt;p&gt;If you want access to a USB drive that is plugged into your computer in your VM, go to Devices &amp;gt; USB Devices and select your drive. It will unmount from your main OS and mount it in your VM.&lt;/p&gt;
&lt;p&gt;Finally, if you want you can go to View &amp;gt; Switch to seamless mode to just have the app you are running in your VM without having the rest of your VM. Just pay attention to the dialogue box that pops up after you do this, it will tell you how to get back to your regular VM window.&lt;/p&gt;
&lt;p&gt;[3]: {{ site.baseurl }}/wp-content/uploads/2013/02/01-pickISO.png
[4]: {{ site.baseurl }}/wp-content/uploads/2013/02/02-setup01.png
[5]: {{ site.baseurl }}/wp-content/uploads/2013/02/03-setup02.png
[6]: {{ site.baseurl }}/wp-content/uploads/2013/02/04-VMsetup.png&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
